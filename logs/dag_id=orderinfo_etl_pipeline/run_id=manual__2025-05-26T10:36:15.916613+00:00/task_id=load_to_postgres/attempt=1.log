{"timestamp":"2025-05-26T10:36:43.778464","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-26T10:36:43.779558","level":"info","event":"Filling up the DagBag from /home/sheela/airflow/dags/orderinfo_etl_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-26T10:36:45.137232Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:45.138133Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:45.138577Z","level":"info","event":"Current task name:load_to_postgres","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:45.139223Z","level":"info","event":"Dag name:orderinfo_etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.024256Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.025149Z","level":"info","event":"--- Generated DDL ---","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.025490Z","level":"info","event":" CREATE TABLE orderinfo_bq_test (","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.025634Z","level":"info","event":"    order_id integer,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.026208Z","level":"info","event":"    user_id integer,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.026814Z","level":"info","event":"    status text,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.027031Z","level":"info","event":"    gender text,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.027154Z","level":"info","event":"    created_at timestamp without time zone,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.027577Z","level":"info","event":"    returned_at timestamp without time zone,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.027985Z","level":"info","event":"    shipped_at timestamp without time zone,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.028315Z","level":"info","event":"    delivered_at timestamp without time zone,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.028714Z","level":"info","event":"    num_of_item integer,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.029157Z","level":"info","event":"    is_cancelled boolean,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.029473Z","level":"info","event":"    delivery_duration_days double precision);","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.437469Z","level":"info","event":"Table created successfully.","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.650574Z","level":"info","event":"[ERROR] Error loading CSV to PostgreSQL via psycopg2: invalid input syntax for type timestamp: \"NaT\"","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.651082Z","level":"info","event":"LINE 1: ...ed', 'F', '2025-02-11T16:50:00'::timestamp, NULL, 'NaT'::tim...","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.651690Z","level":"info","event":"                                                             ^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.652463Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.652228","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-05-26T10:36:46.729896Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.730262Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:36:46.730505Z","level":"info","event":"Task operator:<Task(PythonOperator): load_to_postgres>","chan":"stdout","logger":"task"}
