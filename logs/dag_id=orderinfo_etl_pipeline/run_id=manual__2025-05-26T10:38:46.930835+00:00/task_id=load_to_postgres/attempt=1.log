{"timestamp":"2025-05-26T10:39:20.941664","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-26T10:39:20.952039","level":"info","event":"Filling up the DagBag from /home/sheela/airflow/dags/orderinfo_etl_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-26T10:39:23.229847Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:23.232115Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:23.232571Z","level":"info","event":"Current task name:load_to_postgres","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:23.232932Z","level":"info","event":"Dag name:orderinfo_etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.684320Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.684878Z","level":"info","event":"--- Generated DDL ---","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.685290Z","level":"info","event":" CREATE TABLE orderinfo_bq_test (","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.685667Z","level":"info","event":"    order_id integer,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.686039Z","level":"info","event":"    user_id integer,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.686387Z","level":"info","event":"    status text,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.687076Z","level":"info","event":"    gender text,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.687381Z","level":"info","event":"    created_at timestamp without time zone,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.687698Z","level":"info","event":"    returned_at timestamp without time zone,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.687940Z","level":"info","event":"    shipped_at timestamp without time zone,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.688277Z","level":"info","event":"    delivered_at timestamp without time zone,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.688817Z","level":"info","event":"    num_of_item integer,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.689256Z","level":"info","event":"    is_cancelled boolean,","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:24.689570Z","level":"info","event":"    delivery_duration_days double precision);","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:25.125799Z","level":"info","event":"Table created successfully.","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:25.367189Z","level":"info","event":"[ERROR] Error loading CSV to PostgreSQL via psycopg2: invalid input syntax for type timestamp: \"NaT\"","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:25.367780Z","level":"info","event":"LINE 1: ...ed', 'F', '2025-02-11T16:50:00'::timestamp, NULL, 'NaT'::tim...","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:25.368233Z","level":"info","event":"                                                             ^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:25.368656Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:25.370041","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-05-26T10:39:25.432754Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:25.433145Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-26T10:39:25.433396Z","level":"info","event":"Task operator:<Task(PythonOperator): load_to_postgres>","chan":"stdout","logger":"task"}
